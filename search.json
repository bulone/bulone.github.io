[{"categories":["搞点啥"],"content":"Fixit二度美化，统一样式🥰","date":"2025-03-24","objectID":"/posts/aa6eb19/","tags":["hugo","fixit"],"title":"Fixit主题美化","uri":"/posts/aa6eb19/"},{"categories":["搞点啥"],"content":" 声明 本文章部分内容借助 AI 辅助创作。 安装博客也一月有余，期间也拜访过其他博客站，当然是因为搜索知识进行拜访。对于主题的一些内容进行自定义并完善。 注：涉及到 html 修改部分请将所需修改文件复制一份到主题外相同位置，修改后既能应用也能不破坏原主题文件。 ","date":"2025-03-24","objectID":"/posts/aa6eb19/:0:0","tags":["hugo","fixit"],"title":"Fixit主题美化","uri":"/posts/aa6eb19/"},{"categories":["搞点啥"],"content":"CSS 样式 对于主题 CSS 参数，可以在 assets/css 中创建 _override.scss 进行设置，会进行覆盖。 其他样式可以在同文件夹内创建 _custom.scss 进行编写。 本博客使用的是个人免费使用的 OPPO Sans4.0 字体，主要喜欢这个字体的数字部分。利用 中文网字计划网站 进行字体分包，在使用字体后不影响网站访问速度。 ","date":"2025-03-24","objectID":"/posts/aa6eb19/:1:0","tags":["hugo","fixit"],"title":"Fixit主题美化","uri":"/posts/aa6eb19/"},{"categories":["搞点啥"],"content":"首页列表部分 原主题的首页列表部分是每行一个，列排布。没有封面图还好，如果有封面图因为比例显示为 1000 * 420，所以在屏幕上会显得很大，那么一页下来也显示不了几张图片。偶然进入 Atpx 的空间，发现其博客页很简约整齐，双列排布文章，每个文章块也很小。所以就借鉴了其样式内容，为了不同宽度设备整个块比例适当，所以也顺势调整了图片的宽高比达到合适程度。 文件位置： layouts/_default/home.html \u0026 summary.html layouts/partials/single/post-included-in.html 文章列表图 ","date":"2025-03-24","objectID":"/posts/aa6eb19/:2:0","tags":["hugo","fixit"],"title":"Fixit主题美化","uri":"/posts/aa6eb19/"},{"categories":["搞点啥"],"content":"文章页 主要删除了作者信息，其余未作变化。 文件位置：layouts/post/single.html 调整位置 ","date":"2025-03-24","objectID":"/posts/aa6eb19/:3:0","tags":["hugo","fixit"],"title":"Fixit主题美化","uri":"/posts/aa6eb19/"},{"categories":["搞点啥"],"content":"MSEmoji🎉 表情展示 主题自带有 Twemoji，可以在主题配置文件中选择开启。不过我开启后还是加载失败，所以还是把他关闭了。很喜欢微软的表情，在 Github 上搜索类似 Twemoji 的项目，最终找寻该项目符合。 Msemoji https://github.com/DellZHackintosh/msemoji 使用方法： 在配置文档中搜索 params.page.library.js，在其内部添加 someJavascript = “https://unpkg.com/msemoji@1.1.2/dist/msemoji.min.js\" 创建 custom.js，位置在 assets/js/ msemoji.parse(document.body,{ base: \"https://raw.gitmirror.com/DellZHackintosh/msemoji/refs/heads/main/src/\", ext: \".svg\", folder: \"Color\" }); base ext folder 表情仓库位置 表情拓展名 表情所在目录 主要这三个参数即可，如果还想要其他参数配置，请参考原文档。 ","date":"2025-03-24","objectID":"/posts/aa6eb19/:4:0","tags":["hugo","fixit"],"title":"Fixit主题美化","uri":"/posts/aa6eb19/"},{"categories":["搞点啥"],"content":"Waline 评论系统 博客使用的是 Waline，因为就它带有文章 Reaction，可以自定义图片。其他的几个评论系统都大差不差。使用方法请到 Waline官网 配置参数。 其余好像没什么内容了，如果有新变化，会及时更新内容。 ","date":"2025-03-24","objectID":"/posts/aa6eb19/:5:0","tags":["hugo","fixit"],"title":"Fixit主题美化","uri":"/posts/aa6eb19/"},{"categories":["搞点啥"],"content":"相关链接 文章Reaction表情：Animated-Fluent-Emojis Deepseek：辅助生成样式代码。 ","date":"2025-03-24","objectID":"/posts/aa6eb19/:6:0","tags":["hugo","fixit"],"title":"Fixit主题美化","uri":"/posts/aa6eb19/"},{"categories":["搞点啥"],"content":"好记性不如烂键盘⌨","date":"2025-02-10","objectID":"/posts/pougfvs/","tags":["blog","hugo","fixit"],"title":"博客建站记录","uri":"/posts/pougfvs/"},{"categories":["搞点啥"],"content":"虽然文笔不好，但是看见一个属于自己的站点就很开心。之后尝试过很多博客系统，耳熟能详的 Wordpress,Typecho 还有 Emblog 等。文章没写几篇系统倒是换了不少。而且每次更换都不进行文章备份，所以每次都是全新的博客站。有点跑题了，这些系统无一例外都要购买服务器或虚拟空间，对于当时还是学生的我只能寻找几块一月随时跑路的虚拟空间安装。所以上面说这么多，有钱就尝试动态博客系统，在线随时编写发布。静态博客就需要有台电脑方便些。 静态博客也有很多不过还是选择了 Hugo，因为从 建立-\u003e编写-\u003e发布 所需要的代码量相对很少，而且不接触 npm 那些。 ","date":"2025-02-10","objectID":"/posts/pougfvs/:0:0","tags":["blog","hugo","fixit"],"title":"博客建站记录","uri":"/posts/pougfvs/"},{"categories":["搞点啥"],"content":"安装 Hugo 所需工具：Hugo，Git Git 无需多言，之间下载安装即可。 Hugo官网Windows 提供三种三种通过包管理器进行安装，之后选择按照教程安装即可。 ","date":"2025-02-10","objectID":"/posts/pougfvs/:1:0","tags":["blog","hugo","fixit"],"title":"博客建站记录","uri":"/posts/pougfvs/"},{"categories":["搞点啥"],"content":"选择主题 选择合适的主题进行安装，每个主题都有详细的安装教程，根据教程进行安装。 ","date":"2025-02-10","objectID":"/posts/pougfvs/:2:0","tags":["blog","hugo","fixit"],"title":"博客建站记录","uri":"/posts/pougfvs/"},{"categories":["搞点啥"],"content":"选择编写工具 因为 Hugo 的文章都是 Markdown 类型，所以选择 Markdown 编写软件体验会更好。选择 Obsidian 的原因是可提供的插件多而且免费。在里面就可以一套流程走完，不需要再开命令行之类的。 ","date":"2025-02-10","objectID":"/posts/pougfvs/:3:0","tags":["blog","hugo","fixit"],"title":"博客建站记录","uri":"/posts/pougfvs/"},{"categories":["搞点啥"],"content":"使用的插件 插件截图 DataView：创建代码块查询文章数据。 HomePage：搭配 DataView 可以轻松的创建文章回顾。 Git：在 Obsidian 中进行 git 相关操作。 Image Converter：压缩转换图片用。 Linter： 格式化文档，保存时插入最后更新时间等。 QuickAdd：编写 js 代码在 Obsidian 中就可以新建文章。 其他的插件自行搜索查询相关功能。 QuickAdd 新增文章代码 (由 Deepseek 生成)： // 使用QuickAdd插件的scripting功能 module.exports = async (params) =\u003e { // 获取文件夹名称 const folderName = await params.quickAddApi.inputPrompt(\"请输入文件夹名称\"); if (!folderName) { new Notice(\"未输入文件夹名称。操作已取消。\"); return; } const basePath = '/content/posts'; const folderPath = `${basePath}/${folderName}`; const filePath = `${folderPath}/index.md`; try { // 创建文件夹（如果不存在） if (!await params.app.vault.adapter.exists(folderPath)) { await params.app.vault.createFolder(folderPath); } } catch (err) { new Notice(\"创建文件夹失败：\" + err.message); return; } // 获取当前日期 const currentDate = window.moment().format(\"YYYY-MM-DDTHH:mm:ss+08:00\"); // 生成唯一ID const uniqueID = Math.random().toString(36).substring(2, 9); // 创建文件内容需要的Frontmatter自行添删 const fileContent = `--- title: ${folderName.replace(/-/g, \" \").replace(/\\b\\w/g, l =\u003e l.toUpperCase())} date: ${currentDate} slug: ${uniqueID} description: draft: true tags: - draft categories: - draft featuredImage: featuredImagePreview: --- \u003c!--more--\u003e`; try { // 创建文件并获取文件引用 const newFile = await params.app.vault.create(filePath, fileContent); new Notice(`已在 ${folderName} 文件夹中创建 index.md`); // 获取当前活动的叶子（标签页）或在新的叶子中打开文件 let leaf = params.app.workspace.getLeaf(); // 打开新创建的文件 await leaf.openFile(newFile); // 可选：将焦点移动到编辑器 params.app.workspace.setActiveLeaf(leaf, { focus: true }); } catch (err) { new Notice(\"创建文件失败：\" + err.message); } }; 该代码在 posts 生成 文件夹/index.md 效果 使用方法： 复制并新建 js 文件在 Hugo 文件夹内，如 _scripts/newpost.js； 在 QuickAdd 插件配置中的 Template Folder Path 中将文件夹名称填入； 模板文件夹路径 点击 Mange Macros 按钮，在新弹窗底部输入框内输入名称后点击 Add macro； 新建完成后点击 Config-\u003eUse Scripts 选择刚才创建的 js 文件 -\u003e点击 ADD； 返回到插件主选项，将 Template 点击选择 Macro 然后输入 Name 后 Add Choice； 截图 点击⚙，选择刚才新增的 Macro 名称然后叉掉即可； 如图 Ctrl+P 输入 QuickAdd 刚才新建的 Choice 名称即可，也可以新增快捷键快速添加。 ","date":"2025-02-10","objectID":"/posts/pougfvs/:3:1","tags":["blog","hugo","fixit"],"title":"博客建站记录","uri":"/posts/pougfvs/"},{"categories":["搞点啥"],"content":"发布 编写完成保存后直接推送到远程 Hugo 源码仓库，仓库接收到更新后自动使用 Github Action 生成网站内容推送到 Github Page 仓库，直接一步到位更新网站。 Github Action 代码：来自 KrislinBlog name: github pages # 名字自取 on: push: branches: - main # 这里的意思是当 main分支发生push的时候，运行下面的jobs，这里先改为github-actions jobs: deploy: # 任务名自取 runs-on: ubuntu-latest # 在什么环境运行任务 steps: - uses: actions/checkout@v2 # 引用actions/checkout这个action，与所在的github仓库同名 with: submodules: true # Fetch Hugo themes (true OR recursive) 获取submodule主题 fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo # 步骤名自取 uses: peaceiris/actions-hugo@v2 # hugo官方提供的action，用于在任务环境中获取hugo with: hugo-version: 'latest' # 获取最新版本的hugo extended: true - name: Build run: hugo --minify # 使用hugo构建静态网页 - name: Deploy uses: peaceiris/actions-gh-pages@v3 # 一个自动发布github pages的action with: # github_token: ${{ secrets.GITHUB_TOKEN }} 该项适用于发布到源码相同repo的情况，不能用于发布到其他repo external_repository: bulone/bulone.github.io # 发布到哪个repo personal_token: ${{ secrets.ACTION_ACCESS_TOKEN }} # 发布到其他repo需要提供上面生成的personal access token publish_dir: ./public # 注意这里指的是要发布哪个文件夹的内容，而不是指发布到目的仓库的什么位置，因为hugo默认生成静态网页到public文件夹，所以这里发布public文件夹里的内容 publish_branch: main # 发布到哪个branch ","date":"2025-02-10","objectID":"/posts/pougfvs/:4:0","tags":["blog","hugo","fixit"],"title":"博客建站记录","uri":"/posts/pougfvs/"}]